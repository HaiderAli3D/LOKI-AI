option_settings:
  "aws:elasticbeanstalk:container:python":
    WSGIPath: app:app
    NumProcesses: 3
    NumThreads: 20
  "aws:elasticbeanstalk:application:environment":
    FLASK_APP: app.py
    FLASK_ENV: production
    PYTHONPATH: "/var/app/current:$PYTHONPATH"
    # Set a default SQLite database for initial deployment
    DATABASE_URI: "sqlite:///app.db"
  "aws:elasticbeanstalk:environment:proxy:staticfiles":
    /static: static

files:
  "/opt/elasticbeanstalk/hooks/appdeploy/pre/02_log_deployment_env.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      echo "=== Environment Variables ==="
      env | sort > /var/log/eb-env-vars.log
      chmod 644 /var/log/eb-env-vars.log
      echo "Environment variables logged to /var/log/eb-env-vars.log"

container_commands:
  01_create_directories:
    command: |
      echo "Creating required directories..."
      mkdir -p logs
      mkdir -p migrations
      mkdir -p temp_uploads
      mkdir -p resources
      chmod 755 logs
      chmod 755 migrations
      chmod 755 temp_uploads
      chmod 755 resources
      echo "Directories created successfully"
  
  02_upgrade_pip:
    command: |
      echo "Upgrading pip and setuptools..."
      pip install --upgrade pip
      pip install --upgrade setuptools
      echo "Pip upgraded to $(pip --version)"
  
  03_install_dependencies:
    command: |
      echo "Installing dependencies..."
      pip install -r requirements.txt
      echo "Dependencies installed successfully"
  
  04_run_migrations:
    command: |
      echo "Setting up database..."
      # First check if we can connect to the database
      python -c "
import os, sys
from urllib.parse import urlparse
db_uri = os.environ.get('DATABASE_URI')
if db_uri and db_uri.startswith('postgresql'):
  try:
    import psycopg2
    parsed_uri = urlparse(db_uri)
    user_pass, host_port = parsed_uri.netloc.split('@')
    if ':' in user_pass:
      user, password = user_pass.split(':')
    else:
      user, password = user_pass, ''
    if ':' in host_port:
      host, port = host_port.split(':')
    else:
      host, port = host_port, '5432'
    db_name = parsed_uri.path.lstrip('/')
    conn = psycopg2.connect(dbname=db_name, user=user, password=password, host=host, port=port)
    print('Successfully connected to PostgreSQL database')
    conn.close()
    sys.exit(0)
  except Exception as e:
    print(f'Failed to connect to PostgreSQL: {e}')
    sys.exit(1)
else:
  print('Using SQLite or database URI not provided')
  sys.exit(0)
"
      # If the previous command succeeded, run migrations
      if [ $? -eq 0 ]; then
        echo "Running database migrations..."
        python -m flask db upgrade || echo "Warning: Database migration failed, but continuing deployment"
      else
        echo "DB connection test failed, skipping migrations"
      fi
    leader_only: true
